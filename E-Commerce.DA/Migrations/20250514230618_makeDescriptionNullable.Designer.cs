// <auto-generated />
using System;
using E_Commerce.DA.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Commerce.DA.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20250514230618_makeDescriptionNullable")]
    partial class makeDescriptionNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_Commerce.Domain.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAdded = new DateTime(2025, 5, 11, 13, 0, 0, 0, DateTimeKind.Local),
                            ProductID = 3,
                            Quantity = 1,
                            UserID = 1
                        },
                        new
                        {
                            Id = 2,
                            DateAdded = new DateTime(2025, 5, 12, 15, 0, 0, 0, DateTimeKind.Local),
                            ProductID = 5,
                            Quantity = 2,
                            UserID = 2
                        },
                        new
                        {
                            Id = 3,
                            DateAdded = new DateTime(2025, 5, 13, 18, 0, 0, 0, DateTimeKind.Local),
                            ProductID = 6,
                            Quantity = 1,
                            UserID = 3
                        },
                        new
                        {
                            Id = 4,
                            DateAdded = new DateTime(2025, 5, 14, 12, 0, 0, 0, DateTimeKind.Local),
                            ProductID = 7,
                            Quantity = 2,
                            UserID = 4
                        },
                        new
                        {
                            Id = 5,
                            DateAdded = new DateTime(2025, 5, 19, 13, 0, 0, 0, DateTimeKind.Local),
                            ProductID = 13,
                            Quantity = 2,
                            UserID = 1
                        },
                        new
                        {
                            Id = 6,
                            DateAdded = new DateTime(2025, 5, 20, 15, 0, 0, 0, DateTimeKind.Local),
                            ProductID = 15,
                            Quantity = 1,
                            UserID = 2
                        },
                        new
                        {
                            Id = 7,
                            DateAdded = new DateTime(2025, 5, 21, 18, 0, 0, 0, DateTimeKind.Local),
                            ProductID = 14,
                            Quantity = 1,
                            UserID = 3
                        },
                        new
                        {
                            Id = 8,
                            DateAdded = new DateTime(2025, 5, 22, 12, 0, 0, 0, DateTimeKind.Local),
                            ProductID = 16,
                            Quantity = 1,
                            UserID = 4
                        });
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Devices and gadgets",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Apparel and accessories",
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Fiction and non-fiction books",
                            Name = "Books"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Appliances and home goods",
                            Name = "Home & Kitchen"
                        });
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<DateTime?>("DateProcessed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderID = 1,
                            OrderDate = new DateTime(2025, 5, 11, 3, 0, 0, 0, DateTimeKind.Local),
                            Status = 0,
                            TotalAmount = 150.00m,
                            UserID = 1
                        },
                        new
                        {
                            OrderID = 2,
                            DateProcessed = new DateTime(2025, 5, 12, 5, 0, 0, 0, DateTimeKind.Local),
                            OrderDate = new DateTime(2025, 5, 12, 3, 0, 0, 0, DateTimeKind.Local),
                            Status = 1,
                            TotalAmount = 275.50m,
                            UserID = 2
                        },
                        new
                        {
                            OrderID = 3,
                            DateProcessed = new DateTime(2025, 5, 13, 6, 0, 0, 0, DateTimeKind.Local),
                            OrderDate = new DateTime(2025, 5, 13, 3, 0, 0, 0, DateTimeKind.Local),
                            Status = 3,
                            TotalAmount = 739.97m,
                            UserID = 3
                        },
                        new
                        {
                            OrderID = 4,
                            OrderDate = new DateTime(2025, 5, 14, 3, 0, 0, 0, DateTimeKind.Local),
                            Status = 0,
                            TotalAmount = 104.97m,
                            UserID = 4
                        },
                        new
                        {
                            OrderID = 5,
                            DateProcessed = new DateTime(2025, 5, 15, 7, 0, 0, 0, DateTimeKind.Local),
                            OrderDate = new DateTime(2025, 5, 15, 3, 0, 0, 0, DateTimeKind.Local),
                            Status = 1,
                            TotalAmount = 1349.98m,
                            UserID = 1
                        },
                        new
                        {
                            OrderID = 6,
                            OrderDate = new DateTime(2025, 5, 16, 3, 0, 0, 0, DateTimeKind.Local),
                            Status = 0,
                            TotalAmount = 99.97m,
                            UserID = 2
                        },
                        new
                        {
                            OrderID = 7,
                            DateProcessed = new DateTime(2025, 5, 17, 8, 0, 0, 0, DateTimeKind.Local),
                            OrderDate = new DateTime(2025, 5, 17, 3, 0, 0, 0, DateTimeKind.Local),
                            Status = 3,
                            TotalAmount = 164.96m,
                            UserID = 3
                        },
                        new
                        {
                            OrderID = 8,
                            DateProcessed = new DateTime(2025, 5, 18, 9, 0, 0, 0, DateTimeKind.Local),
                            OrderDate = new DateTime(2025, 5, 18, 3, 0, 0, 0, DateTimeKind.Local),
                            Status = 1,
                            TotalAmount = 29.98m,
                            UserID = 4
                        },
                        new
                        {
                            OrderID = 9,
                            OrderDate = new DateTime(2025, 5, 19, 3, 0, 0, 0, DateTimeKind.Local),
                            Status = 0,
                            TotalAmount = 279.97m,
                            UserID = 1
                        },
                        new
                        {
                            OrderID = 10,
                            DateProcessed = new DateTime(2025, 5, 20, 10, 0, 0, 0, DateTimeKind.Local),
                            OrderDate = new DateTime(2025, 5, 20, 3, 0, 0, 0, DateTimeKind.Local),
                            Status = 1,
                            TotalAmount = 199.97m,
                            UserID = 2
                        });
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderID = 1,
                            ProductID = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            OrderID = 1,
                            ProductID = 2,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 3,
                            OrderID = 2,
                            ProductID = 3,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 4,
                            OrderID = 2,
                            ProductID = 4,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 5,
                            OrderID = 3,
                            ProductID = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 6,
                            OrderID = 3,
                            ProductID = 7,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 7,
                            OrderID = 4,
                            ProductID = 5,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 8,
                            OrderID = 4,
                            ProductID = 8,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 9,
                            OrderID = 5,
                            ProductID = 3,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 10,
                            OrderID = 5,
                            ProductID = 2,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 11,
                            OrderID = 6,
                            ProductID = 4,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 12,
                            OrderID = 6,
                            ProductID = 8,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 13,
                            OrderID = 7,
                            ProductID = 7,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 14,
                            OrderID = 7,
                            ProductID = 6,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 15,
                            OrderID = 8,
                            ProductID = 5,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 16,
                            OrderID = 8,
                            ProductID = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 17,
                            OrderID = 9,
                            ProductID = 9,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 18,
                            OrderID = 9,
                            ProductID = 11,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 19,
                            OrderID = 10,
                            ProductID = 10,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 20,
                            OrderID = 10,
                            ProductID = 12,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryID = 1,
                            Description = "Latest model smartphone",
                            Name = "Smartphone",
                            Price = 699.99m,
                            UnitsInStock = 5000
                        },
                        new
                        {
                            Id = 2,
                            CategoryID = 2,
                            Description = "Cotton casual t-shirt",
                            Name = "T-Shirt",
                            Price = 19.99m,
                            UnitsInStock = 7500
                        },
                        new
                        {
                            Id = 3,
                            CategoryID = 1,
                            Description = "High-performance laptop",
                            Name = "Laptop",
                            Price = 1299.99m,
                            UnitsInStock = 2000
                        },
                        new
                        {
                            Id = 4,
                            CategoryID = 2,
                            Description = "Denim blue jeans",
                            Name = "Jeans",
                            Price = 49.99m,
                            UnitsInStock = 6000
                        },
                        new
                        {
                            Id = 5,
                            CategoryID = 3,
                            Description = "Best-selling science fiction book",
                            Name = "Sci-Fi Novel",
                            Price = 14.99m,
                            UnitsInStock = 10000
                        },
                        new
                        {
                            Id = 6,
                            CategoryID = 3,
                            Description = "Collection of gourmet recipes",
                            Name = "Cookbook",
                            Price = 24.99m,
                            UnitsInStock = 8000
                        },
                        new
                        {
                            Id = 7,
                            CategoryID = 4,
                            Description = "High-speed kitchen blender",
                            Name = "Blender",
                            Price = 89.99m,
                            UnitsInStock = 3000
                        },
                        new
                        {
                            Id = 8,
                            CategoryID = 4,
                            Description = "Programmable coffee machine",
                            Name = "Coffee Maker",
                            Price = 59.99m,
                            UnitsInStock = 4000
                        },
                        new
                        {
                            Id = 9,
                            CategoryID = 1,
                            Description = "Noise-cancelling over-ear headphones",
                            Name = "Wireless Headphones",
                            Price = 199.99m,
                            UnitsInStock = 3000
                        },
                        new
                        {
                            Id = 10,
                            CategoryID = 1,
                            Description = "Fitness tracking smart watch",
                            Name = "Smart Watch",
                            Price = 249.99m,
                            UnitsInStock = 2500
                        },
                        new
                        {
                            Id = 11,
                            CategoryID = 2,
                            Description = "Water-resistant winter jacket",
                            Name = "Jacket",
                            Price = 79.99m,
                            UnitsInStock = 4000
                        },
                        new
                        {
                            Id = 12,
                            CategoryID = 2,
                            Description = "Comfortable running sneakers",
                            Name = "Sneakers",
                            Price = 69.99m,
                            UnitsInStock = 5000
                        },
                        new
                        {
                            Id = 13,
                            CategoryID = 3,
                            Description = "Gripping mystery thriller",
                            Name = "Mystery Novel",
                            Price = 12.99m,
                            UnitsInStock = 12000
                        },
                        new
                        {
                            Id = 14,
                            CategoryID = 3,
                            Description = "Comprehensive world history text",
                            Name = "History Book",
                            Price = 29.99m,
                            UnitsInStock = 7000
                        },
                        new
                        {
                            Id = 15,
                            CategoryID = 4,
                            Description = "Multi-function air fryer",
                            Name = "Air Fryer",
                            Price = 119.99m,
                            UnitsInStock = 2000
                        },
                        new
                        {
                            Id = 16,
                            CategoryID = 4,
                            Description = "Compact toaster oven with multiple settings",
                            Name = "Toaster Oven",
                            Price = 79.99m,
                            UnitsInStock = 3500
                        });
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSignedInNow")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 5, 11, 3, 0, 0, 0, DateTimeKind.Local),
                            DateUpdated = new DateTime(2025, 5, 11, 3, 0, 0, 0, DateTimeKind.Local),
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            IsActive = true,
                            IsSignedInNow = false,
                            LastName = "Admin",
                            PasswordHash = "AQAAAAIAAYagAAAAECtJWIRqgoBEDzcFOu4Kz0LCY/MSge+0SZns5va/p5u6Gg4O87dz1beHha+iyFbsHA==",
                            Status = 0,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 5, 11, 3, 0, 0, 0, DateTimeKind.Local),
                            DateUpdated = new DateTime(2025, 5, 11, 3, 0, 0, 0, DateTimeKind.Local),
                            Email = "user@user.com",
                            FirstName = "User",
                            IsActive = true,
                            IsSignedInNow = false,
                            LastName = "User",
                            PasswordHash = "AQAAAAIAAYagAAAAEBHDiyLRTxpFa9qgoSrzKlEMb2TQjBd1itcvuGrwgvtx80k7zeKga6KPH7+QO+522w==",
                            Status = 1,
                            Username = "user"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 5, 11, 3, 0, 0, 0, DateTimeKind.Local),
                            DateUpdated = new DateTime(2025, 5, 11, 3, 0, 0, 0, DateTimeKind.Local),
                            Email = "superadmin@admin.com",
                            FirstName = "Super",
                            IsActive = true,
                            IsSignedInNow = false,
                            LastName = "Admin",
                            PasswordHash = "AQAAAAIAAYagAAAAECtJWIRqgoBEDzcFOu4Kz0LCY/MSge+0SZns5va/p5u6Gg4O87dz1beHha+iyFbsHA==",
                            Status = 0,
                            Username = "admin2"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 5, 11, 3, 0, 0, 0, DateTimeKind.Local),
                            DateUpdated = new DateTime(2025, 5, 11, 3, 0, 0, 0, DateTimeKind.Local),
                            Email = "jane@client.com",
                            FirstName = "Jane",
                            IsActive = true,
                            IsSignedInNow = false,
                            LastName = "Doe",
                            PasswordHash = "AQAAAAIAAYagAAAAEBHDiyLRTxpFa9qgoSrzKlEMb2TQjBd1itcvuGrwgvtx80k7zeKga6KPH7+QO+522w==",
                            Status = 1,
                            Username = "user2"
                        });
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.CartItem", b =>
                {
                    b.HasOne("E_Commerce.Domain.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("E_Commerce.Domain.Models.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.Order", b =>
                {
                    b.HasOne("E_Commerce.Domain.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.OrderDetail", b =>
                {
                    b.HasOne("E_Commerce.Domain.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("E_Commerce.Domain.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.Product", b =>
                {
                    b.HasOne("E_Commerce.Domain.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("E_Commerce.Domain.Models.User", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
